import {
  ACLProfile,
  ContentFilterProfile,
  ContentFilterRule,
  CustomResponse,
  FlowControlPolicy,
  GlobalFilter,
  HttpRequestMethods,
  RateLimit,
  SecurityPolicy,
} from '@/types'

const titles: { [key: string]: string } = {
  'admin': 'Admin',
  'allow': 'Allow',
  'allow_bot': 'Allow Bot',
  'args': 'Arguments',
  'attrs': 'Attributes',
  'audit-log': 'Audit Log',
  'passthrough': 'Passthrough',
  'cookies': 'Cookies',
  'curiefense-lists': 'Curiefense Lists',
  'customsigs': 'Custom Signatures',
  'deny': 'Deny',
  'deny_bot': 'Deny Bot',
  'events-and-attacks': 'Events & Attacks',
  'external-lists': 'External Lists',
  'force_deny': 'Enforce Deny',
  'headers': 'Headers',
  'names': 'Name',
  'reg': 'Regex',
  'regex': 'Regex',
  'saml2-sso': 'SAML2 SSO',
  'top-activities': 'Top Activities',
  'traffic-overview': 'Traffic Overview',
  'update-log': 'Update log',
  'version-control': 'Version Control',
  'include': 'Include',
  'exclude': 'Exclude',
  'headers-entry': 'Header',
  'cookies-entry': 'Cookie',
  'args-entry': 'Argument',
  'attrs-entry': 'Attribute',
  'aclprofiles': 'ACL Profiles',
  'aclprofiles-singular': 'ACL Profile',
  'ratelimits': 'Rate Limits',
  'ratelimits-singular': 'Rate Limit',
  'securitypolicies': 'Security Policies',
  'securitypolicies-singular': 'Security Policy',
  'contentfilterprofiles': 'Content Filter Profiles',
  'contentfilterprofiles-singular': 'Content Filter Profile',
  'contentfilterrules': 'Content Filter Rules',
  'contentfilterrules-singular': 'Content Filter Rule',
  'globalfilters': 'Global Filters',
  'globalfilters-singular': 'Global Filter',
  'flowcontrol': 'Flow Control Policies',
  'flowcontrol-singular': 'Flow Control Policy',
  'actions': 'Custom Responses',
  'actions-singular': 'Custom Response',
  'active': 'Active',
  'report': 'Report',
  'ignore': 'Ignore',
}

const limitOptionsTypes = {
  'headers': 'Header',
  'cookies': 'Cookie',
  'args': 'Argument',
  'attrs': 'Attribute',
}

function generateUUID(): string {
  let dt = new Date().getTime()
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = (dt + Math.random() * 16) % 16 | 0
    dt = Math.floor(dt / 16)
    return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16)
  })
}

function generateUUID2(): string {
  return generateUUID().split('-')[4]
}

const defaultFlowControlSequenceItem = {
  'method': 'GET' as HttpRequestMethods,
  'uri': '/',
  'cookies': {},
  'headers': {
    'host': 'www.example.com',
  },
  'args': {},
}

const newDocEntryFactory: { [key: string]: Function } = {
  aclprofiles(): ACLProfile {
    return {
      'id': generateUUID2(),
      'name': 'New ACL Profile',
      'description': 'New ACL Profile Description and Remarks',
      'action': 'default',
      'tags': [],
      'allow': [],
      'allow_bot': [],
      'deny_bot': [],
      'passthrough': [],
      'force_deny': [],
      'deny': [],
    }
  },

  contentfilterprofiles(): ContentFilterProfile {
    return {
      'id': generateUUID2(),
      'name': 'New Content Filter Profile',
      'description': 'New Content Filter Profile Description and Remarks',
      'action': 'default',
      'tags': [],
      'ignore_body': true,
      'ignore_alphanum': true,
      'headers': {
        'names': [],
        'regex': [],
        'max_count': 42,
        'max_length': 1024,
      },
      'cookies': {
        'names': [],
        'regex': [],
        'max_count': 42,
        'max_length': 1024,
      },
      'args': {
        'names': [],
        'regex': [],
        'max_count': 512,
        'max_length': 1024,
      },
      'path': {
        'names': [],
        'regex': [],
        'max_count': 42,
        'max_length': 1024,
      },
      'decoding': {
        'base64': true,
        'dual': true,
        'html': false,
        'unicode': false,
      },
      'masking_seed': 'CHANGEME',
      'content_type': [],
      'active': ['cf-rule-risk:5', 'cf-rule-risk:4', 'cf-rule-risk:3', 'cf-rule-subcategory:libinjection-xss'],
      'report': [],
      'ignore': [],
    }
  },

  globalfilters(): GlobalFilter {
    return {
      'id': generateUUID2(),
      'name': 'New Global Filter',
      'source': 'self-managed',
      'mdate': '',
      'description': 'New Global Filter Description and Remarks',
      'active': false,
      'tags': ['trusted'],
      'action': 'monitor',
      'rule': {
        'relation': 'OR',
        'entries': [],
      },
    }
  },

  securitypolicies(): SecurityPolicy {
    const id = generateUUID2()
    return {
      'id': id,
      'name': 'New Security Policy',
      'match': `${id}.example.com`,
      'map': [
        {
          'match': '/',
          'name': 'default',
          'acl_profile': '__default__',
          'content_filter_profile': '__default__',
          'acl_active': false,
          'content_filter_active': false,
          'limit_ids': [],
        },
      ],
    }
  },

  ratelimits(): RateLimit {
    return {
      'id': generateUUID2(),
      'name': 'New Rate Limit Rule',
      'global': false,
      'description': 'New Rate Limit Rule Description and Remarks',
      'timeframe': 60,
      'thresholds': [
        {
          'limit': 5,
          'action': 'default',
        },
      ],
      'include': ['all'],
      'exclude': [],
      'key': [
        {
          'attrs': 'ip',
        },
      ],
      'pairwith': {
        'self': 'self',
      },
    }
  },

  flowcontrol(): FlowControlPolicy {
    return {
      'id': generateUUID2(),
      'name': 'New Flow Control Policy',
      'description': 'New Flow Control Policy Description and Remarks',
      'active': true,
      'include': ['all'],
      'exclude': [],
      'timeframe': 60,
      'tags': [],
      'key': [
        {
          'attrs': 'ip',
        },
      ],
      'sequence': [
        {...defaultFlowControlSequenceItem},
        {
          ...defaultFlowControlSequenceItem,
          method: 'POST' as HttpRequestMethods,
        },
      ],
    }
  },

  contentfilterrules(): ContentFilterRule {
    return {
      'id': generateUUID2(),
      'name': 'New Content Filter Rule',
      'description': 'New Content Filter Rule Description and Remarks',
      'msg': '',
      'operand': '',
      'risk': 1,
      'category': '',
      'subcategory': '',
      'tags': [],
    }
  },

  actions(): CustomResponse {
    return {
      'id': generateUUID2(),
      'name': 'New Custom Response',
      'description': 'New Custom Response Rule Description and Remarks',
      'tags': [],
      'type': 'monitor',
    }
  },
}

const countriesNamesCodeMap = {
  'AFGHANISTAN': 'AF',
  'Ã…LAND ISLANDS': 'AX',
  'ALBANIA': 'AL',
  'ALGERIA': 'DZ',
  'AMERICAN SAMOA': 'AS',
  'ANDORRA': 'AD',
  'ANGOLA': 'AO',
  'ANGUILLA': 'AI',
  'ANTARCTICA': 'AQ',
  'ANTIGUA AND BARBUDA': 'AG',
  'ARGENTINA': 'AR',
  'ARMENIA': 'AM',
  'ARUBA': 'AW',
  'AUSTRALIA': 'AU',
  'AUSTRIA': 'AT',
  'AZERBAIJAN': 'AZ',
  'BAHAMAS': 'BS',
  'BAHRAIN': 'BH',
  'BANGLADESH': 'BD',
  'BARBADOS': 'BB',
  'BELARUS': 'BY',
  'BELGIUM': 'BE',
  'BELIZE': 'BZ',
  'BENIN': 'BJ',
  'BERMUDA': 'BM',
  'BHUTAN': 'BT',
  'BOLIVIA, PLURINATIONAL STATE OF': 'BO',
  'BONAIRE, SINT EUSTATIUS AND SABA': 'BQ',
  'BOSNIA AND HERZEGOVINA': 'BA',
  'BOTSWANA': 'BW',
  'BOUVET ISLAND': 'BV',
  'BRAZIL': 'BR',
  'BRITISH INDIAN OCEAN TERRITORY': 'IO',
  'BRUNEI DARUSSALAM': 'BN',
  'BULGARIA': 'BG',
  'BURKINA FASO': 'BF',
  'BURUNDI': 'BI',
  'CAMBODIA': 'KH',
  'CAMEROON': 'CM',
  'CANADA': 'CA',
  'CAPE VERDE': 'CV',
  'CAYMAN ISLANDS': 'KY',
  'CENTRAL AFRICAN REPUBLIC': 'CF',
  'CHAD': 'TD',
  'CHILE': 'CL',
  'CHINA': 'CN',
  'CHRISTMAS ISLAND': 'CX',
  'COCOS (KEELING) ISLANDS': 'CC',
  'COLOMBIA': 'CO',
  'COMOROS': 'KM',
  'CONGO': 'CG',
  'CONGO, THE DEMOCRATIC REPUBLIC OF THE': 'CD',
  'COOK ISLANDS': 'CK',
  'COSTA RICA': 'CR',
  'CÃ”TE D\'IVOIRE': 'CI',
  'CROATIA': 'HR',
  'CUBA': 'CU',
  'CURAÃ‡AO': 'CW',
  'CYPRUS': 'CY',
  'CZECH REPUBLIC': 'CZ',
  'DENMARK': 'DK',
  'DJIBOUTI': 'DJ',
  'DOMINICA': 'DM',
  'DOMINICAN REPUBLIC': 'DO',
  'ECUADOR': 'EC',
  'EGYPT': 'EG',
  'EL SALVADOR': 'SV',
  'EQUATORIAL GUINEA': 'GQ',
  'ERITREA': 'ER',
  'ESTONIA': 'EE',
  'ETHIOPIA': 'ET',
  'FALKLAND ISLANDS (MALVINAS)': 'FK',
  'FAROE ISLANDS': 'FO',
  'FIJI': 'FJ',
  'FINLAND': 'FI',
  'FRANCE': 'FR',
  'FRENCH GUIANA': 'GF',
  'FRENCH POLYNESIA': 'PF',
  'FRENCH SOUTHERN TERRITORIES': 'TF',
  'GABON': 'GA',
  'GAMBIA': 'GM',
  'GEORGIA': 'GE',
  'GERMANY': 'DE',
  'GHANA': 'GH',
  'GIBRALTAR': 'GI',
  'GREECE': 'GR',
  'GREENLAND': 'GL',
  'GRENADA': 'GD',
  'GUADELOUPE': 'GP',
  'GUAM': 'GU',
  'GUATEMALA': 'GT',
  'GUERNSEY': 'GG',
  'GUINEA': 'GN',
  'GUINEA-BISSAU': 'GW',
  'GUYANA': 'GY',
  'HAITI': 'HT',
  'HEARD ISLAND AND MCDONALD ISLANDS': 'HM',
  'HOLY SEE (VATICAN CITY STATE)': 'VA',
  'HONDURAS': 'HN',
  'HONG KONG': 'HK',
  'HUNGARY': 'HU',
  'ICELAND': 'IS',
  'INDIA': 'IN',
  'INDONESIA': 'ID',
  'IRAN, ISLAMIC REPUBLIC OF': 'IR',
  'IRAQ': 'IQ',
  'IRELAND': 'IE',
  'ISLE OF MAN': 'IM',
  'ISRAEL': 'IL',
  'ITALY': 'IT',
  'JAMAICA': 'JM',
  'JAPAN': 'JP',
  'JERSEY': 'JE',
  'JORDAN': 'JO',
  'KAZAKHSTAN': 'KZ',
  'KENYA': 'KE',
  'KIRIBATI': 'KI',
  'KOREA, DEMOCRATIC PEOPLE\'S REPUBLIC OF': 'KP',
  'KOREA, REPUBLIC OF': 'KR',
  'KUWAIT': 'KW',
  'KYRGYZSTAN': 'KG',
  'LAO PEOPLE\'S DEMOCRATIC REPUBLIC': 'LA',
  'LATVIA': 'LV',
  'LEBANON': 'LB',
  'LESOTHO': 'LS',
  'LIBERIA': 'LR',
  'LIBYA': 'LY',
  'LIECHTENSTEIN': 'LI',
  'LITHUANIA': 'LT',
  'LUXEMBOURG': 'LU',
  'MACAO': 'MO',
  'MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF': 'MK',
  'MADAGASCAR': 'MG',
  'MALAWI': 'MW',
  'MALAYSIA': 'MY',
  'MALDIVES': 'MV',
  'MALI': 'ML',
  'MALTA': 'MT',
  'MARSHALL ISLANDS': 'MH',
  'MARTINIQUE': 'MQ',
  'MAURITANIA': 'MR',
  'MAURITIUS': 'MU',
  'MAYOTTE': 'YT',
  'MEXICO': 'MX',
  'MICRONESIA, FEDERATED STATES OF': 'FM',
  'MOLDOVA, REPUBLIC OF': 'MD',
  'MONACO': 'MC',
  'MONGOLIA': 'MN',
  'MONTENEGRO': 'ME',
  'MONTSERRAT': 'MS',
  'MOROCCO': 'MA',
  'MOZAMBIQUE': 'MZ',
  'MYANMAR': 'MM',
  'NAMIBIA': 'NA',
  'NAURU': 'NR',
  'NEPAL': 'NP',
  'NETHERLANDS': 'NL',
  'NEW CALEDONIA': 'NC',
  'NEW ZEALAND': 'NZ',
  'NICARAGUA': 'NI',
  'NIGER': 'NE',
  'NIGERIA': 'NG',
  'NIUE': 'NU',
  'NORFOLK ISLAND': 'NF',
  'NORTHERN MARIANA ISLANDS': 'MP',
  'NORWAY': 'NO',
  'OMAN': 'OM',
  'PAKISTAN': 'PK',
  'PALAU': 'PW',
  'PALESTINE, STATE OF': 'PS',
  'PANAMA': 'PA',
  'PAPUA NEW GUINEA': 'PG',
  'PARAGUAY': 'PY',
  'PERU': 'PE',
  'PHILIPPINES': 'PH',
  'PITCAIRN': 'PN',
  'POLAND': 'PL',
  'PORTUGAL': 'PT',
  'PUERTO RICO': 'PR',
  'QATAR': 'QA',
  'RÃ‰UNION': 'RE',
  'ROMANIA': 'RO',
  'RUSSIAN FEDERATION': 'RU',
  'RUSSIA': 'RU',
  'RWANDA': 'RW',
  'SAINT BARTHÃ‰LEMY': 'BL',
  'SAINT HELENA, ASCENSION AND TRISTAN DA CUNHA': 'SH',
  'SAINT KITTS AND NEVIS': 'KN',
  'SAINT LUCIA': 'LC',
  'SAINT MARTIN (FRENCH PART)': 'MF',
  'SAINT PIERRE AND MIQUELON': 'PM',
  'SAINT VINCENT AND THE GRENADINES': 'VC',
  'SAMOA': 'WS',
  'SAN MARINO': 'SM',
  'SAO TOME AND PRINCIPE': 'ST',
  'SAUDI ARABIA': 'SA',
  'SENEGAL': 'SN',
  'SERBIA': 'RS',
  'SEYCHELLES': 'SC',
  'SIERRA LEONE': 'SL',
  'SINGAPORE': 'SG',
  'SINT MAARTEN (DUTCH PART)': 'SX',
  'SLOVAKIA': 'SK',
  'SLOVENIA': 'SI',
  'SOLOMON ISLANDS': 'SB',
  'SOMALIA': 'SO',
  'SOUTH AFRICA': 'ZA',
  'SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS': 'GS',
  'SOUTH SUDAN': 'SS',
  'SPAIN': 'ES',
  'SRI LANKA': 'LK',
  'SUDAN': 'SD',
  'SURINAME': 'SR',
  'SVALBARD AND JAN MAYEN': 'SJ',
  'SWAZILAND': 'SZ',
  'SWEDEN': 'SE',
  'SWITZERLAND': 'CH',
  'SYRIAN ARAB REPUBLIC': 'SY',
  'TAIWAN, PROVINCE OF CHINA': 'TW',
  'TAIWAN': 'TW',
  'TAJIKISTAN': 'TJ',
  'TANZANIA, UNITED REPUBLIC OF': 'TZ',
  'THAILAND': 'TH',
  'TIMOR-LESTE': 'TL',
  'TOGO': 'TG',
  'TOKELAU': 'TK',
  'TONGA': 'TO',
  'TRINIDAD AND TOBAGO': 'TT',
  'TUNISIA': 'TN',
  'TURKEY': 'TR',
  'TURKMENISTAN': 'TM',
  'TURKS AND CAICOS ISLANDS': 'TC',
  'TUVALU': 'TV',
  'UGANDA': 'UG',
  'UKRAINE': 'UA',
  'UNITED ARAB EMIRATES': 'AE',
  'UNITED KINGDOM': 'GB',
  'UNITED STATES': 'US',
  'UNITED STATES MINOR OUTLYING ISLANDS': 'UM',
  'URUGUAY': 'UY',
  'UZBEKISTAN': 'UZ',
  'VANUATU': 'VU',
  'VENEZUELA, BOLIVARIAN REPUBLIC OF': 'VE',
  'VIET NAM': 'VN',
  'VIRGIN ISLANDS, BRITISH': 'VG',
  'VIRGIN ISLANDS, U.S.': 'VI',
  'WALLIS AND FUTUNA': 'WF',
  'WESTERN SAHARA': 'EH',
  'YEMEN': 'YE',
  'ZAMBIA': 'ZM',
  'ZIMBABWE': 'ZW',
} as { [key: string]: string }

const geoCountryTagToCode = (geoTag: string): string => {
  const countryName = geoTag.split(':')[1].replace(/-/g, ' ')
  return countriesNamesCodeMap[countryName.toUpperCase()]
}

export default {
  name: 'DatasetsUtils',
  titles,
  limitOptionsTypes,
  generateUUID,
  generateUUID2,
  newDocEntryFactory,
  defaultFlowControlSequenceItem,
  countriesNamesCodeMap,
  geoCountryTagToCode,
}
